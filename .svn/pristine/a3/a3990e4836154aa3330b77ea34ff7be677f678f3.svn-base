package com.hrxt.controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.hrxt.pojo.Csjh;
import com.hrxt.pojo.CsjhOption;
import com.hrxt.pojo.Page;
import com.hrxt.pojo.ReportCSJH;
import com.hrxt.pojo.Site;
import com.hrxt.service.CsjhService;
import com.hrxt.service.OrgService;
import com.hrxt.utils.ExcelUtil;
import com.hrxt.utils.JSONutils;
/**
 * 措施计划 controller
 * @author ZhaoQin
 *
 */
@Controller
@RequestMapping("/csjh")
public class CsjhController {

	@Autowired
	private CsjhService csjhService;
	
	@Autowired
	private OrgService orgService;
	
	@RequestMapping("/insert")
	@ResponseBody
	public String insetCsjh(Csjh csjh){	
		return this.csjhService.insertOrUpdate(csjh);
	}
	
	
	@RequestMapping("/insertList")
	@ResponseBody
	public String insetCsjhList( Csjh csjh){	
		System.out.println(JSONutils.Object2String(csjh));
		List<Csjh> list11 = new ArrayList<Csjh>();
		list11.add(csjh);
		List<String> list = csjhService.batchInsertOrUpdate(list11);
		return JSONutils.Object2String(list);
	}
	
	
	@RequestMapping("/delOneCsjh")
	@ResponseBody
	public String delOneCsjh(String seq){	
		  return csjhService.delOneYPZBB(seq);
	}

	
	@RequestMapping("/delCsjhList")
	@ResponseBody
	public String delCsjhList(String seqlist){	
		return csjhService.delListYPZBB(seqlist);
	}
	
	
	@RequestMapping("/getCsjhList")
	@ResponseBody
	public String getCsjhList(Csjh csjh,Page<List<Csjh>> page){	
		return JSONutils.Object2String(csjhService.getMonthPZList(csjh, page));
	}
	
	
	/**
	 * 记录审核  方法
	 * @param seqlist
	 * @return
	 */
	@RequestMapping("/auditCsjh")
	@ResponseBody
	public String auditCsjh(String seqlist){	
		return csjhService.auditOneCsjh(seqlist);
	}
	
	@RequestMapping("/unAuditCsjh")
	@ResponseBody
	public String unAuditCsjh(String seqlist){	
		return csjhService.unAuditOneCsjh(seqlist);
	}
	/**
	 * 【提交】  方法
	 * @param seqlist
	 * @return
	 */
	@RequestMapping("/submitCsjh")
	@ResponseBody
	public String submitMonthPZ(String seqlist){	
		return csjhService.submitCsjh(seqlist);
	}
	@RequestMapping("/unSubmitCsjh")
	@ResponseBody
	public String unSubmitCsjhH(String seqlist){	
		return csjhService.unSubmitCsjh(seqlist);
	}
	
	
	
	/**
	 * 批量上传数据
	 * @param fileMult
	 * @param fileName
	 * @return
	 */
	@RequestMapping("/excelUpdateCsjh")
	public String updateCsjhList(MultipartFile fileMult,String fileName){	
		List<Map<String, Object>> list = null;
		if(fileMult==null) {
			//System.out.println("没有数据流");
			return "没有数据流";
		}
		try {
			String name =  fileMult.getOriginalFilename();
			InputStream is = fileMult.getInputStream();
			//System.out.println(name+is);
			String [] fileds = {"site_name","yc_name","well_name","dzpz","khpz","stime","mark"};
			if(is != null) {
									//sheet0  第一行   iostream 传入文件名  读取字段名字
				list = ExcelUtil.getDataListByexcel(0, 1, is, name, fileds);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map = list.get(i);
			Csjh csjh = new Csjh();
			csjh.setSite_name((String)map.get("site_name"));
			csjh.setYc_name((String)map.get("yc_name"));
			//csjh.setDzpz((Integer.parseInt((String) map.get("dzpz"))));
			csjh.setWell_name((String)map.get("well_name"));
			csjh.setStime((String)map.get("stime"));
			csjh.setMark((String)map.get("mark"));
			System.out.println(JSONutils.Object2String(map));
			this.csjhService.insertOrUpdate(csjh);
		}
		
		return "";
	}
	
	
	
	/**  
	 * 下载导入模板        措施计划, 
	 */
	@RequestMapping("/dwnloadCsjhTmp")
	public void dwnloadTmpMB(Csjh csjh,Page<List<Csjh>> page,HttpServletResponse response,String fileName){
		
		//获取措施计划数据
		Map<String,Object>  map = this.csjhService.getMonthPZList(csjh, page);
		List<Csjh> datalist = (List<Csjh>)map.get("data");
		
		HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("信息表");

        if(fileName ==  null) {
        	fileName = "措施计划";//设置要导出的文件的名字
        }
        
        //新增数据行，并且设置单元格数据
        int rowNum = 1;

        String[] headers = { "工区", "断块", "井名", "地质配注","考核配注","时间","备注"};
        
        sheet.setColumnWidth(0, 35*150);
        sheet.setColumnWidth(1, 35*150);
        sheet.setColumnWidth(2, 35*150);
        sheet.setColumnWidth(3, 35*150);
        sheet.setColumnWidth(4, 35*150);
        sheet.setColumnWidth(5, 35*150);
        //headers表示excel表中第一行的表头

        HSSFRow row = sheet.createRow(0);
        //在excel表中添加表头

        for(int i=0;i<headers.length;i++){
            HSSFCell cell = row.createCell(i);
            HSSFRichTextString text = new HSSFRichTextString(headers[i]);
            cell.setCellValue(text);
            
        }

        //在表中存放查询到的数据放入对应的列
        for (Csjh csjhTmp : datalist) {
            HSSFRow row1 = sheet.createRow(rowNum);
            row1.createCell(0).setCellValue(csjhTmp.getSite_name());
            row1.createCell(1).setCellValue(csjhTmp.getYc_name());
            row1.createCell(2).setCellValue(csjhTmp.getWell_name());
            if(csjhTmp.getWell_type_name() != null) {
            	row1.createCell(3).setCellValue(csjhTmp.getWell_type_name());
            }
            if(csjhTmp.getWell_step_name() != null) {
            	row1.createCell(4).setCellValue(csjhTmp.getWell_step_name());
            }
            if(csjhTmp.getStime() != null) {
            	row1.createCell(5).setCellValue(csjhTmp.getStime());
            }
            if(csjhTmp.getMark() != null) {
            	row1.createCell(6).setCellValue(csjhTmp.getMark());
            }
            rowNum++;
        }

        response.setContentType("application/octet-stream");
        String newFileName = "";
		try {
			newFileName = new String(fileName.getBytes("gb2312"), "ISO8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        response.setHeader("Content-disposition", "attachment;filename=" + newFileName+ ".xls");
        try {
			response.flushBuffer();
			workbook.write(response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
        
	}
	
	/**
	 * 请求URL：  /csjh/CSJHReportData  
	 * 获取测试计划  报表数据
	 * @param site_ids   工区id，逗号分隔
	 * @param cs_ids	 测试类型id，逗号分隔
	 * @param stime		测试时间，必须传  格式   yyyy-mm
	 * @return
	 */
	@RequestMapping("/CSJHReportData")
	@ResponseBody
	public String CSJHReportData(String site_ids,String cs_ids,String stime){
		stime = "2018-11";
		Map<String,Object>  map = this.csjhService.getReportCSJHRecord(site_ids,cs_ids,stime);
		@SuppressWarnings("unchecked")
		List<ReportCSJH> datalist = (List<ReportCSJH>)map.get("data");
		return JSONutils.Object2String(datalist);
	}
	
	/**  
	 * 
	 *  下载导入模板        措施计划,
	 * @param site_ids   工区id，逗号分隔
	 * @param cs_ids	 测试类型id，逗号分隔
	 * @param stime		测试时间，必须传  格式   yyyy-mm
	 */
	@RequestMapping("/dwnloadCSJHReport")
	public void dwnloadCSJHReport(String site_ids,String cs_ids,String stime,
								  HttpServletResponse response,String fileName){
		
		////////////////////////////获取对应的数据//////////////////////////////////////////////////////////////
		//获取工区id 和 name
		List<Site> orglist = this.orgService.getPublicSite();
		//获取措施计划数据
		Map<String,Object>  map = this.csjhService.getReportCSJHRecord(site_ids,cs_ids,stime);
		@SuppressWarnings("unchecked")
		List<ReportCSJH> datalist = (List<ReportCSJH>)map.get("data");

		//////////////////////////////开始统计数据////////////////////////////////////////////////////////////////
		Map<String,Object> site_statistics = new HashMap<String,Object>();
		Map<String,Object> csType_statistics = new HashMap<String,Object>();
		
		
		
		HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("信息表");

        if(fileName ==  null) {
        	fileName = "措施计划";//设置要导出的文件的名字
        }
        
        //新增数据行，并且设置单元格数据
        int rowNum = 1;

        String[] headers = { "工区", "断块", "井名", "地质配注","考核配注","时间","备注"};
        
        sheet.setColumnWidth(0, 35*150);
        sheet.setColumnWidth(1, 35*150);
        sheet.setColumnWidth(2, 35*150);
        sheet.setColumnWidth(3, 35*150);
        sheet.setColumnWidth(4, 35*150);
        sheet.setColumnWidth(5, 35*150);
        //headers表示excel表中第一行的表头

        HSSFRow row = sheet.createRow(0);
        //在excel表中添加表头

        for(int i=0;i<headers.length;i++){
            HSSFCell cell = row.createCell(i);
            HSSFRichTextString text = new HSSFRichTextString(headers[i]);
            cell.setCellValue(text);
            
        }

		
        
        //在表中存放查询到的数据放入对应的列
        for (ReportCSJH csjhTmp : datalist) {
            HSSFRow row1 = sheet.createRow(rowNum);
            row1.createCell(0).setCellValue(csjhTmp.getSite_name());
            row1.createCell(1).setCellValue(csjhTmp.getYc_name());
            row1.createCell(2).setCellValue(csjhTmp.getWell_name());
            if(csjhTmp.getWell_type_name() != null) {
            	row1.createCell(3).setCellValue(csjhTmp.getWell_type_name());
            }
            if(csjhTmp.getWell_step_name() != null) {
            	row1.createCell(4).setCellValue(csjhTmp.getWell_step_name());
            }
            if(csjhTmp.getStime() != null) {
            	row1.createCell(5).setCellValue(csjhTmp.getStime());
            }
            if(csjhTmp.getMark() != null) {
            	row1.createCell(6).setCellValue(csjhTmp.getMark());
            }
            rowNum++;
        }

        response.setContentType("application/octet-stream");
        String newFileName = "";
		try {
			newFileName = new String(fileName.getBytes("gb2312"), "ISO8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        response.setHeader("Content-disposition", "attachment;filename=" + newFileName+ ".xls");
        try {
			response.flushBuffer();
			workbook.write(response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
        
	}
	
	
	
	
	/**  新增或者更新   csjhoption 下拉框
	 * /csjh/insertOrUpdateCsjhOption
	 */
	@RequestMapping("/insertOrUpdateCsjhOption")
	@ResponseBody
	public String insertOrUpdateCsjhOption(CsjhOption csjhOption){	
		return this.csjhService.insertOrUpdateCsjhOption(csjhOption);
	}
	

	
	/**  
	 *  删除 csjhOption  下拉框
	 * /csjh/deleteCsjhOption
	 * 	删除传递jcjh——id
	 */
	@RequestMapping("/deleteCsjhOption")
	@ResponseBody
	public String deleteCsjh(CsjhOption csjhOption){	
		return this.csjhService.deleteCsjhOption(csjhOption.getCs_id());
	}
	

	/**   
	 * 	获取所有的
	 * 	/csjh/getCsjhOption
	 * 	不需要传递参数  获取全部水的检测类型
	 */
	@RequestMapping("/getCsjhOption")
	@ResponseBody
	public String getCsjhOption(CsjhOption csjhOption){	
		List<CsjhOption> list =this.csjhService.getJCsjhOption(csjhOption);
		return JSON.toJSONString(list);
	}
	
	
	
	
	
	
	
}
