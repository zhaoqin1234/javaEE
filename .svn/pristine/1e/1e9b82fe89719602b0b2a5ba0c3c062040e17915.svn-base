package com.hrxt.controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.hrxt.pojo.Csjh;
import com.hrxt.pojo.CsjhOption;
import com.hrxt.pojo.Page;
import com.hrxt.pojo.ReportCSJH;
import com.hrxt.pojo.Site;
import com.hrxt.service.CsjhService;
import com.hrxt.service.OrgService;
import com.hrxt.utils.ExcelUtil;
import com.hrxt.utils.JSONutils;
import com.hrxt.utils.Util;
/**
 * 措施计划 controller
 * @author ZhaoQin
 *
 */
@Controller
@RequestMapping("/csjh")
public class CsjhController {

	@Autowired
	private CsjhService csjhService;
	
	@Autowired
	private OrgService orgService;
	
	@RequestMapping("/insert")
	@ResponseBody
	public String insetCsjh(Csjh csjh){	
		return this.csjhService.insertOrUpdate(csjh);
	}
	
	
	@RequestMapping("/insertList")
	@ResponseBody
	public String insetCsjhList( Csjh csjh){	
		System.out.println(JSONutils.Object2String(csjh));
		List<Csjh> list11 = new ArrayList<Csjh>();
		list11.add(csjh);
		List<String> list = csjhService.batchInsertOrUpdate(list11);
		return JSONutils.Object2String(list);
	}
	
	
	@RequestMapping("/delOneCsjh")
	@ResponseBody
	public String delOneCsjh(String seq){	
		  return csjhService.delOneYPZBB(seq);
	}

	
	@RequestMapping("/delCsjhList")
	@ResponseBody
	public String delCsjhList(String seqlist){	
		return csjhService.delListYPZBB(seqlist);
	}
	
	
	@RequestMapping("/getCsjhList")
	@ResponseBody
	public String getCsjhList(Csjh csjh,Page<List<Csjh>> page){	
		return JSONutils.Object2String(csjhService.getMonthPZList(csjh, page));
	}
	
	
	/**
	 * 记录审核  方法
	 * @param seqlist
	 * @return
	 */
	@RequestMapping("/auditCsjh")
	@ResponseBody
	public String auditCsjh(String seqlist){	
		return csjhService.auditOneCsjh(seqlist);
	}
	
	@RequestMapping("/unAuditCsjh")
	@ResponseBody
	public String unAuditCsjh(String seqlist){	
		return csjhService.unAuditOneCsjh(seqlist);
	}
	/**
	 * 【提交】  方法
	 * @param seqlist
	 * @return
	 */
	@RequestMapping("/submitCsjh")
	@ResponseBody
	public String submitMonthPZ(String seqlist){	
		return csjhService.submitCsjh(seqlist);
	}
	@RequestMapping("/unSubmitCsjh")
	@ResponseBody
	public String unSubmitCsjhH(String seqlist){	
		return csjhService.unSubmitCsjh(seqlist);
	}
	
	
	
	/**
	 * 批量上传数据
	 * @param fileMult
	 * @param fileName
	 * @return
	 */
	@RequestMapping("/excelUpdateCsjh")
	public String updateCsjhList(MultipartFile fileMult,String fileName){	
		List<Map<String, Object>> list = null;
		if(fileMult==null) {
			//System.out.println("没有数据流");
			return "没有数据流";
		}
		try {
			String name =  fileMult.getOriginalFilename();
			InputStream is = fileMult.getInputStream();
			//System.out.println(name+is);
			String [] fileds = {"site_name","yc_name","well_name","dzpz","khpz","stime","mark"};
			if(is != null) {
									//sheet0  第一行   iostream 传入文件名  读取字段名字
				list = ExcelUtil.getDataListByexcel(0, 1, is, name, fileds);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map = list.get(i);
			Csjh csjh = new Csjh();
			csjh.setSite_name((String)map.get("site_name"));
			csjh.setYc_name((String)map.get("yc_name"));
			//csjh.setDzpz((Integer.parseInt((String) map.get("dzpz"))));
			csjh.setWell_name((String)map.get("well_name"));
			csjh.setStime((String)map.get("stime"));
			csjh.setMark((String)map.get("mark"));
			System.out.println(JSONutils.Object2String(map));
			this.csjhService.insertOrUpdate(csjh);
		}
		
		return "";
	}
	
	
	
	/**  
	 * 下载导入模板        措施计划, 
	 */
	@RequestMapping("/dwnloadCsjhTmp")
	public void dwnloadTmpMB(Csjh csjh,Page<List<Csjh>> page,HttpServletResponse response,String fileName){
		
		//获取措施计划数据
		Map<String,Object>  map = this.csjhService.getMonthPZList(csjh, page);
		List<Csjh> datalist = (List<Csjh>)map.get("data");
		
		HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("信息表");

        if(fileName ==  null) {
        	fileName = "措施计划";//设置要导出的文件的名字
        }
        
        //新增数据行，并且设置单元格数据
        int rowNum = 1;

        String[] headers = { "工区", "断块", "井名", "地质配注","考核配注","时间","备注"};
        
        sheet.setColumnWidth(0, 35*150);
        sheet.setColumnWidth(1, 35*150);
        sheet.setColumnWidth(2, 35*150);
        sheet.setColumnWidth(3, 35*150);
        sheet.setColumnWidth(4, 35*150);
        sheet.setColumnWidth(5, 35*150);
        //headers表示excel表中第一行的表头

        HSSFRow row = sheet.createRow(0);
        //在excel表中添加表头

        for(int i=0;i<headers.length;i++){
            HSSFCell cell = row.createCell(i);
            HSSFRichTextString text = new HSSFRichTextString(headers[i]);
            cell.setCellValue(text);
            
        }

        //在表中存放查询到的数据放入对应的列
        for (Csjh csjhTmp : datalist) {
            HSSFRow row1 = sheet.createRow(rowNum);
            row1.createCell(0).setCellValue(csjhTmp.getSite_name());
            row1.createCell(1).setCellValue(csjhTmp.getYc_name());
            row1.createCell(2).setCellValue(csjhTmp.getWell_name());
            if(csjhTmp.getWell_type_name() != null) {
            	row1.createCell(3).setCellValue(csjhTmp.getWell_type_name());
            }
            if(csjhTmp.getWell_step_name() != null) {
            	row1.createCell(4).setCellValue(csjhTmp.getWell_step_name());
            }
            if(csjhTmp.getStime() != null) {
            	row1.createCell(5).setCellValue(csjhTmp.getStime());
            }
            if(csjhTmp.getMark() != null) {
            	row1.createCell(6).setCellValue(csjhTmp.getMark());
            }
            rowNum++;
        }

        response.setContentType("application/octet-stream");
        String newFileName = "";
		try {
			newFileName = new String(fileName.getBytes("gb2312"), "ISO8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        response.setHeader("Content-disposition", "attachment;filename=" + newFileName+ ".xls");
        try {
			response.flushBuffer();
			workbook.write(response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
        
	}
	
	
	
	
	
	/**
	 * 请求URL：  /csjh/CSJHReportData  
	 * 获取测试计划  报表数据
	 * @param site_ids   工区id，逗号分隔
	 * @param cs_ids	 测试类型id，逗号分隔
	 * @param stime		测试时间，必须传  格式   yyyy-mm
	 * @return
	 */
	@RequestMapping("/CSJHReportData")
	@ResponseBody
	public String CSJHReportData(String site_ids,String cs_ids,String stime){
		stime = "2018-11";
		Map<String,Object>  map = this.csjhService.getReportCSJHRecord(site_ids,cs_ids,stime);
		@SuppressWarnings("unchecked")
		List<ReportCSJH> datalist = (List<ReportCSJH>)map.get("data");
		return JSONutils.Object2String(datalist);
	}
	
	
	
	
	
	
	
	/**  
	 *   /csjh/dwnloadCSJHReport
	 *   http://localhost:8080/DZSBB/csjh/dwnloadCSJHReport
	 *    down 下载导入模板        措施计划,
	 *    
	 * @param site_ids   工区id，逗号分隔
	 * @param cs_ids	 测试类型id，逗号分隔
	 * @param stime		测试时间，必须传  格式   yyyy-mm
	 * 		井别识别  0 油井 ，1水井，非0和1就识别为其他井
	 * 		程序性能O(n) 数据列表 遍历了3次
	 * 	zhaoqin 2018年11月20日17:36:59
	 */
	@SuppressWarnings("unused")
	@RequestMapping("/dwnloadCSJHReport")
	public void dwnloadCSJHReport(String site_ids,String cs_ids,String stime,
								  HttpServletResponse response,String fileName){
		stime = "2018-11";//测试直接指定信息
		
		
		//获取工区id 和 name
		List<Site> orglist = this.orgService.getPublicSite();
		//获取措施计划数据
		Map<String,Object>  map = this.csjhService.getReportCSJHRecord(site_ids,cs_ids,stime);
		@SuppressWarnings("unchecked")
		List<ReportCSJH> datalist = (List<ReportCSJH>)map.get("data");
		
		
		String oilWellFlag = "0";
		String waterWellFlag = "1";
		String otherllFlag = "";
		
		////开始统计数据    存放统计信息
		Map<String,Object> site_statistics = new HashMap<String,Object>();
		Map<String,Object> csType_oil_statistics = new HashMap<String,Object>();
		Map<String,Object> csType_water_statistics = new HashMap<String,Object>();
		Map<String,Object> csType_other_statistics = new HashMap<String,Object>();
		Map<String,Object> wellType_statistics = new HashMap<String,Object>();
		
		/**  【【【【【【第一步】】】】】
		 * 遍历后台的 报表记录    ：datalist
		 * 统计结果
		 * 井类型	：wellType_statistics
		 * 油井测试类型 ：csType_oil_statistics
		 * 水井测试类型：csType_water_statistics
		 * 其他井测试类型：   csType_other_statistics
		 * 工区统计信息：site_statistics
		 * 
		 */
		Map<String, Object> cdjhData_statistics = fenXiZuZhuangData(datalist, 
										site_statistics, csType_oil_statistics,csType_water_statistics, 
										csType_other_statistics, wellType_statistics, oilWellFlag, waterWellFlag);
		//      【【【【【【第二步】】】】】
		//开始为excel中添加数据
		HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("常规测试表");

        //表头样式 1 开始
  		HSSFFont titleFont = workbook.createFont();
  		titleFont.setFontName("微软雅黑");
  		titleFont.setFontHeightInPoints((short) 16);// 字号
  		titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);// 加粗
      		
  		// ，创建单元格，并设置值表头 设置表头居中  
		HSSFCellStyle style = workbook.createCellStyle(); // 表格内容样式
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style.setBorderBottom(HSSFCellStyle.BORDER_THIN);// 下边框
		style.setBorderLeft(HSSFCellStyle.BORDER_THIN);// 左边框
		style.setBorderRight(HSSFCellStyle.BORDER_THIN);// 右边框
		style.setBorderTop(HSSFCellStyle.BORDER_THIN);// 上边框
		style.setWrapText(true); // 设置换行
		style.setFont(titleFont);
  			
		HSSFFont titleFont2 = workbook.createFont();
		titleFont2.setFontName("宋体");
		titleFont2.setFontHeightInPoints((short) 11);// 字号
		titleFont2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);// 加粗
		
		HSSFCellStyle style2 = workbook.createCellStyle(); // 表格内容样式
		style2.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		style2.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);// 下边框
		style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);// 左边框
		style2.setBorderRight(HSSFCellStyle.BORDER_THIN);// 右边框
		style2.setBorderTop(HSSFCellStyle.BORDER_THIN);// 上边框
		style2.setWrapText(true); // 设置换行
		style2.setFont(titleFont2);
		
		
		HSSFFont titleFont3 = workbook.createFont();
		titleFont2.setFontName("宋体");
		titleFont2.setFontHeightInPoints((short) 11);// 字号
		titleFont2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);// 加粗
		
		HSSFCellStyle style3 = workbook.createCellStyle(); // 表格内容样式
		style3.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		style3.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style3.setBorderBottom(HSSFCellStyle.BORDER_THIN);// 下边框
		style3.setBorderLeft(HSSFCellStyle.BORDER_THIN);// 左边框
		style3.setBorderRight(HSSFCellStyle.BORDER_THIN);// 右边框
		style3.setBorderTop(HSSFCellStyle.BORDER_THIN);// 上边框
		style3.setWrapText(true); // 设置换行
		style3.setFont(titleFont3);
		
        if(fileName ==  null) {
        	fileName = "措施计划";//设置要导出的文件的名字
        }
        
        //新增数据行，并且设置单元格数据
        int rowNum = 4;
        //   xxx年x月 常规措施计划表       stime格式 xxxx-xx
        String headers = "常规测试计划表";
        if(stime != null) {
        	String[] stimearray = stime.split("-");  //xxxx-xx
            headers = stimearray[0] + "年" + stimearray[1]+"月"+headers;
        }
        
        
        String[] title1 = { "项目", "措施", "合计"};//中间的  工区名字 来自map
        String[] title2 = { "井号", "日增油(t)"};
        
        //headers表示excel表中第一行的表头

        HSSFRow row = sheet.createRow(0);
        row.createCell(0).setCellValue("表5");
        
        row = sheet.createRow(1);  
        HSSFCell callheader =row.createCell(0);//  XXXX年X月措施计划表
        callheader.setCellValue(headers);
        callheader.setCellStyle(style);
        row.setHeight((short)1000);
        
        HSSFRow row2 = sheet.createRow(2);   
        HSSFCell calltitle1 = row2.createCell(0);//项目  + 样式
        calltitle1.setCellValue(title1[0]);
        calltitle1.setCellStyle(style2);
        HSSFCell calltitle2  =row2.createCell(1);//措施 + 样式
        calltitle2.setCellValue(title1[1]);
        calltitle2.setCellStyle(style2);
        row2.setHeight((short)600); 
        
        HSSFRow row3 = sheet.createRow(3);		//第三行的样式
        row3.setHeight((short)600); 
        HSSFCell calltitle3 = row3.createCell(0);//项目 下一行的样式
        calltitle3.setCellStyle(style2);
        calltitle3.setCellValue("");
        HSSFCell calltitle4  =row3.createCell(1);//措施 下一行的样式
        calltitle4.setCellStyle(style2);
        calltitle4.setCellValue("");
        
        int tmpindex = 2;
        int tmpindex2 = 2;
        
        //合并单元工区单元格
        for(Entry<String, Object> entry:site_statistics.entrySet()){
        	sheet.addMergedRegion(new CellRangeAddress(2, 2, tmpindex2, tmpindex2+1));
        	tmpindex2+=2;
        }
        
        sheet.setColumnWidth(0, 20*150);			//列宽
    	sheet.setColumnWidth(1, 35*150);
    	sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0)); //合计合并   项目
    	sheet.addMergedRegion(new CellRangeAddress(2, 3, 1, 1)); //合计合并   措施
        for(Entry<String, Object> entry:site_statistics.entrySet()){
        	Map<String,Object> map1 = Util.objectToMap(entry.getValue());
        	
        	sheet.setColumnWidth(tmpindex, 35*150);			//列宽
        	sheet.setColumnWidth(tmpindex+1, 15*150);
        	HSSFCell cellSite11 = row2.createCell(tmpindex);	//工区左
        	HSSFCell cellSite12 = row2.createCell(tmpindex+1);	//工区右  为了添加样式  边框
        	cellSite11.setCellStyle(style2);
        	cellSite12.setCellStyle(style2);
        	cellSite11.setCellValue(map1.get("site_name").toString());	//工区
        	//cellSite12.setCellValue("");	//工区
        	sheet.addMergedRegion(new CellRangeAddress(2, 2, tmpindex2, tmpindex2+1));
        	
        	HSSFCell cellSite21 = row3.createCell(tmpindex);	// 油井
        	cellSite21.setCellValue(title2[0]);
        	cellSite21.setCellStyle(style2);
        	HSSFCell cellSite22 = row3.createCell(tmpindex+1);	// 油井
        	cellSite22.setCellValue(title2[1]);//产油量
        	cellSite22.setCellStyle(style2);
        	
        	tmpindex+=2;
        }
        sheet.setColumnWidth(tmpindex, 35*150);
    	sheet.setColumnWidth(tmpindex+1, 15*150);
    	sheet.addMergedRegion(new CellRangeAddress(2, 2, tmpindex, tmpindex+1)); //合计合并
    	HSSFCell cellSite31 = row2.createCell(tmpindex);
    	cellSite31.setCellValue("合计");
    	cellSite31.setCellStyle(style2);
    	HSSFCell cellSite41 = row3.createCell(tmpindex);  //  合计  油井数
    	cellSite41.setCellValue(title2[0]);
    	cellSite41.setCellStyle(style2);
    	HSSFCell cellSite42 = row3.createCell(tmpindex+1);// 合计 增油数
    	cellSite42.setCellValue(title2[1]);
    	cellSite42.setCellStyle(style2);
    	
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, tmpindex+1)); //合计  油井 合并
        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, tmpindex+1)); //合计 增油 合并
        

            //HSSFRichTextString text = new HSSFRichTextString(headers[i]);  cell.setCellValue(text);
      
        //   【【【【【【    第三步    】】】】】
        rowNum = 4;
        //开始拼接 ab列的项目类型名称 
        // System.out.println(JSON.toJSONString(cdjhData_statistics));
        //开始添加
        for (Map.Entry<String, Object> xms_entry:cdjhData_statistics.entrySet()) { //获取项目类型  油井  水井  其他类型    开始遍历
        	String well_type_flag = xms_entry.getKey();
        	Map<String,Object> xm_map  =  (Map<String, Object>) xms_entry.getValue();
        	
        	for (Map.Entry<String, Object> site_entry:xm_map.entrySet()) { //该项目下所有的 工区  
        		String site_id = site_entry.getKey();
        		Map<String,Object> site_map  =  (Map<String, Object>) site_entry.getValue();
        		String xiaojiCellName = "小计";
        		
        		int rowIndex = 0;
        		int oilIndex = 0;
        		int waterIndex = 0;
        		int otherIndex = 0;
        		for (Map.Entry<String, Object> cs_entry:site_map.entrySet()) {// 项目-工区 --》》所有的测试类型
        			rowIndex++; 
        			String cs_id = cs_entry.getKey();
        			ReportCSJH reportCDJH = null;
        			int csSize = 0;
        			HSSFRow row1 = null;
        			int csRowHeight = 1500; //单元格行高设置
        			int  xiaojiRowHeight = 300;//小计的行高
        			if(well_type_flag.equals(oilWellFlag)) {
        				oilIndex++;  //油井计数
        				String xmName = "油井";
        				reportCDJH = (ReportCSJH) csType_oil_statistics.get(cs_id);
            			csSize = csType_oil_statistics.size();
            			row1 = sheet.createRow(rowNum++);
            			row1.setHeight((short)csRowHeight);
            			if(reportCDJH.getCs_name() != null) {
            				HSSFCell call = row1.createCell(0);//.setCellValue(new HSSFRichTextString(xmName));
            				call.setCellValue(xmName);
            				call.setCellStyle(style);
            				HSSFCell call2 =row1.createCell(1);//.setCellValue(reportCDJH.getCs_name());
            				call2.setCellValue(reportCDJH.getCs_name());
            				call2.setCellStyle(style2);
            			}
            			
            			if(rowIndex == csSize) {	//每个油井类型  最后添加一个小计
            				row1 = sheet.createRow(rowNum++);
            				row1.setHeight((short)xiaojiRowHeight);
            				HSSFCell call1 = row1.createCell(1);
            				call1.setCellValue(xiaojiCellName);
            				call1.setCellStyle(style2);
            				sheet.addMergedRegion(new CellRangeAddress(rowNum-csSize-1, rowNum-1, 0, 0));
            			}
        			}else if(well_type_flag.equals(waterWellFlag)) {
        				waterIndex++; // 水井计数
        				String xmName = "水井";
            			reportCDJH = (ReportCSJH) csType_water_statistics.get(cs_id);
            			csSize = csType_water_statistics.size();
            			row1 = sheet.createRow(rowNum++);
            			row1.setHeight((short)csRowHeight);
            			if(reportCDJH.getCs_name() != null) {
            				HSSFCell call = row1.createCell(0);//.setCellValue(new HSSFRichTextString(xmName));
            				call.setCellValue(xmName);
            				call.setCellStyle(style);
            				HSSFCell call2 =row1.createCell(1);//.setCellValue(reportCDJH.getCs_name());
            				call2.setCellValue(reportCDJH.getCs_name());
            				call2.setCellStyle(style2);
            			}
            			if(rowIndex == csSize) {	//每个油井类型  最后添加一个小计
            				row1 = sheet.createRow(rowNum++);
            				row1.setHeight((short)xiaojiRowHeight);
            				HSSFCell call1 = row1.createCell(1);
            				call1.setCellValue(xiaojiCellName);
            				call1.setCellStyle(style2);
            				sheet.addMergedRegion(new CellRangeAddress(rowNum-csSize-1, rowNum-1, 0, 0));
            			}
        			}else {
        				otherIndex++;//其他井计数
        				String xmName = "其他";
        				if(csType_other_statistics != null  ) {
        					reportCDJH = (ReportCSJH) csType_other_statistics.get(cs_id);
                			csSize = csType_other_statistics.size();
        				}
            			row1 = sheet.createRow(rowNum++);
            			row1.setHeight((short)csRowHeight);
            			if(reportCDJH != null && reportCDJH.getCs_name() != null) {
            				HSSFCell call = row1.createCell(0);//.setCellValue(new HSSFRichTextString(xmName));
            				call.setCellValue(xmName);
            				call.setCellStyle(style);
            				HSSFCell call2 =row1.createCell(1);//.setCellValue(reportCDJH.getCs_name());
            				call2.setCellValue(reportCDJH.getCs_name());
            				call2.setCellStyle(style2);
            			}
            			
            			if(rowIndex == csSize) {	//每个油井类型  最后添加一个小计
            				row1 = sheet.createRow(rowNum++);
            				row1.setHeight((short)xiaojiRowHeight);
            				HSSFCell call1 = row1.createCell(1);
            				call1.setCellValue(xiaojiCellName);
            				call1.setCellStyle(style2);
            				sheet.addMergedRegion(new CellRangeAddress(rowNum-csSize-1, rowNum-1, 0, 0));
            			}
        			}
        			/// 【【【【【【第四步】】】】】
        			//最后添加合计
        			funAddSumEnd(csType_oil_statistics, csType_water_statistics, csType_other_statistics, style,style2,style3,sheet,rowNum);
                  
        		}
        		break;		//只遍历一个工区  为首列的  设置   测试类型名字
        	}
        }
        //  【【【【【【   第五步   】】】】】
        
        //开始添加数据区域
        
	    int colNum = 2 ;	//列开始为工区拼接数据
        for (Map.Entry<String, Object> xms_entry:cdjhData_statistics.entrySet()) { //获取项目类型  油井  水井  其他类型    开始遍历
        	String well_type_flag = xms_entry.getKey();
        	Map<String,Object> xm_map  =  (Map<String, Object>) xms_entry.getValue();
        	colNum = 2;// 每种油井类脑血管都是从  2列开始拼接的
        	Double GongQuProdCountBy = (double) 0 ;
			int gongQuWellSum  = 0 ;//工区下 井求和
        	for (Map.Entry<String, Object> site_entry:xm_map.entrySet()) { //该项目下所有的 工区  
        		String site_id = site_entry.getKey();
        		Map<String,Object> site_map  =  (Map<String, Object>) site_entry.getValue();
        		
        		rowNum = 4;//每个工区都是从第四行开始的
        		
        		List<ReportCSJH> newWelllist = null;
				List<ReportCSJH> oldWelllist = null;
				List<ReportCSJH> otherWellList = null;
				int cs_Oil_Size = csType_oil_statistics.size();
				int cs_Water_Size = csType_water_statistics.size();
				int cs_Other_Size = csType_other_statistics.size();
				int allce_size = cs_Oil_Size + cs_Water_Size + cs_Other_Size;
				int site_Size = site_statistics.size();
				int index = 0 ;//虚幻计数
				Double gongQuWellCountByTypeCount = (double) 0;//统计某 
				Double gongQuProdCountBy = (double) 0 ;
				int xmWellSum  = 0 ;//工区下 井求和
        		for (Map.Entry<String, Object> cs_entry:site_map.entrySet()) {// 项目-工区 --》》所有的测试类型
        			  
        			String cs_id = cs_entry.getKey();
        			Map<String,Object> csjh_tmp_map = (Map<String, Object>) cs_entry.getValue();
        			ReportCSJH reportCDJH = null;
        			HSSFRow row1 = null;
        			Double csRiZengOilCount = (double) 0;	//某措施的日增有
        			
        			//System.out.println(JSON.toJSONString(csjh_tmp_map));
        			if(well_type_flag.equals(oilWellFlag)) {  //油井数据
        				newWelllist = (List<ReportCSJH>) csjh_tmp_map.get("newWell");
						oldWelllist = (List<ReportCSJH>) csjh_tmp_map.get("oldWell");
						otherWellList = (List<ReportCSJH>) csjh_tmp_map.get("otherWell");

						String newWellNameStrCon = statisticsList(newWelllist);
						String oldWellNameStrCon = statisticsList(oldWelllist);
						String otherWellNameStrCon = statisticsList(otherWellList);
						String allWellNameStrCon = "";
						
						allWellNameStrCon = newWellNameStrCon+oldWellNameStrCon+otherWellNameStrCon;
						// 日增油统计
						csRiZengOilCount = dataListRiZengOilCount(newWelllist,csRiZengOilCount);
						csRiZengOilCount = dataListRiZengOilCount(oldWelllist,csRiZengOilCount);
						csRiZengOilCount = dataListRiZengOilCount(otherWellList,csRiZengOilCount);
						gongQuWellCountByTypeCount = gongQuWellCountByTypeCount + csRiZengOilCount;
						
						HSSFRichTextString ts= makeHSSFRichTextString(workbook,newWelllist,oldWelllist,otherWellList,
								  									  newWellNameStrCon,oldWellNameStrCon,otherWellNameStrCon);
						row1 = sheet.getRow(rowNum++);
					    if(ts != null && row1 != null) {
					    	HSSFCell call1 = row1.createCell(colNum);//井名称
					    	call1.setCellValue(ts); 
					    	call1.setCellStyle(style2);
					    	HSSFCell call2 = row1.createCell(colNum+1);//日增油
					    	if(csRiZengOilCount == (double)0 || csRiZengOilCount == null) {
					    		call2.setCellValue("");
					    	}else {
					    		call2.setCellValue(csRiZengOilCount);
					    	}
					    	call2.setCellStyle(style2);
					    }
					    int inerSum = newWelllist.size()+oldWelllist.size()+otherWellList.size();
					    xmWellSum += inerSum ;
					    System.out.println(inerSum+"=="+gongQuWellSum);
					    if((index+1) == site_map.size()) { //油井小计
					    	System.out.println(index+"oil>>>>>>"+rowNum +"=="+ colNum);
					    	row1 = sheet.getRow(rowNum);
					    	HSSFCell call1 = row1.createCell(colNum);
					    	call1.setCellValue(xmWellSum);	
					    	call1.setCellStyle(style2);
					    	HSSFCell call2 = row1.createCell(colNum+1);
					    	if(gongQuWellCountByTypeCount == (double)0 || gongQuWellCountByTypeCount == null) {
					    		call2.setCellValue("");
					    	}else {
					    		call2.setCellValue(gongQuWellCountByTypeCount);
					    	}
					    	call2.setCellStyle(style2);
					    }
        			}else if(well_type_flag.equals(waterWellFlag) ) {	//水井数据
        				int oilRows = cs_Oil_Size +1 ;
        				int oilcols = cs_Oil_Size +1 ;
        				//colNum -= (site_Size * 2); //列修正
        				newWelllist = (List<ReportCSJH>) csjh_tmp_map.get("newWell");
						oldWelllist = (List<ReportCSJH>) csjh_tmp_map.get("oldWell");
						otherWellList = (List<ReportCSJH>) csjh_tmp_map.get("otherWell");
						// 油井名拼接
						String newWellNameStrCon = statisticsList(newWelllist);
						String oldWellNameStrCon = statisticsList(oldWelllist);
						String otherWellNameStrCon = statisticsList(otherWellList);
						String allWellNameStrCon = "";
						allWellNameStrCon = newWellNameStrCon+oldWellNameStrCon+otherWellNameStrCon;
						// 日增油统计
						csRiZengOilCount = dataListRiZengOilCount(newWelllist,csRiZengOilCount);
						csRiZengOilCount = dataListRiZengOilCount(oldWelllist,csRiZengOilCount);
						csRiZengOilCount = dataListRiZengOilCount(otherWellList,csRiZengOilCount);
						gongQuWellCountByTypeCount = gongQuWellCountByTypeCount + csRiZengOilCount;
						
						HSSFRichTextString ts= makeHSSFRichTextString(workbook,newWelllist,oldWelllist,otherWellList,
																	  newWellNameStrCon,oldWellNameStrCon,otherWellNameStrCon);

					    row1 = sheet.getRow(oilRows+rowNum++);	//修正 插入  二次插入到 油井下面
					    if(ts != null && row1 != null) {
					    	HSSFCell call1 = row1.createCell(colNum);// 某 工区 某措施下 所有井的名字  
					    	call1.setCellValue(ts);	// allWellNameStrCon
					    	call1.setCellStyle(style2);
					    	HSSFCell call2 = row1.createCell(colNum+1);//某 工区 某措施下  水井井的数量
					    	if(csRiZengOilCount == (double)0 || csRiZengOilCount == null) {
					    		call2.setCellValue("");
					    	}else {
					    		call2.setCellValue(csRiZengOilCount);
					    	}
					    	call2.setCellStyle(style2);
					    }
					    int inerSum = newWelllist.size()+oldWelllist.size()+otherWellList.size();
					    xmWellSum += inerSum ;
					    System.out.println(inerSum+"=="+xmWellSum);
					    if(index == site_map.size()-1  ) {  //水井小计  csjh_tmp_map
					    	System.out.println(index+">>>>>>"+rowNum +"=="+ colNum);
					    	row1 = sheet.getRow(oilRows+rowNum);
					    	
					    	HSSFCell call1 = row1.createCell(colNum); 
					    	call1.setCellValue(xmWellSum);	
					    	call1.setCellStyle(style2);
					    	HSSFCell call2 = row1.createCell(colNum+1);
					    	if(gongQuWellCountByTypeCount == (double)0 || gongQuWellCountByTypeCount == null) {
					    		call2.setCellValue("");
					    	}else {
					    		call2.setCellValue(gongQuWellCountByTypeCount);
					    	}
					    	call2.setCellStyle(style2);
					    }
        			}else {		//其他井类型
        				
        			}
        			index++;
        			/**   最后的合计
        			row1 = sheet.getRow(oilRows+rowNum);
			    	HSSFCell call1 = row1.createCell(colNum); 
			    	call1.setCellValue(xmWellSum);	
			    	call1.setCellStyle(style2);
			    	HSSFCell call2 = row1.createCell(colNum+1);
			    	if(gongQuWellCountByTypeCount == (double)0 || gongQuWellCountByTypeCount == null) {
			    		call2.setCellValue("");
			    	}else {
			    		call2.setCellValue(gongQuWellCountByTypeCount);
			    	}
			    	call2.setCellStyle(style2);
			    	**/
        		}
        		colNum += 2; //列向后跳两列
        	}
        }
        
        
        //   http://localhost:8080/DZSBB/csjh/dwnloadCSJHReport
        sheet.createFreezePane(2, 4, 2, 4);
        //sheet.autoSizeColumn(2);
        
        try {
			response.setContentType("application/octet-stream");
			String newFileName = new String(fileName.getBytes("gb2312"), "ISO8859-1");
			response.setHeader("Content-disposition", "attachment;filename=" + newFileName+ ".xls");
			response.flushBuffer();
			workbook.write(response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
        
	}
	
	
	/**
	 * 
	 * 根据新井 老井  其他井    为合并后的井  添加逗号和样式
	 * 
	 * @param workbook
	 * @param newWellList
	 * @param oldWellList
	 * @param otherWellList
	 * @param newWellNameStrCon
	 * @param oldWellNameStrCon
	 * @param otherWellNameStrCon
	 * @return
	 */
	public HSSFRichTextString makeHSSFRichTextString(HSSFWorkbook workbook,
													List<ReportCSJH> newWellList,List<ReportCSJH> oldWellList,List<ReportCSJH> otherWellList,
													String newWellNameStrCon,String oldWellNameStrCon,String otherWellNameStrCon
													) {
		HSSFRichTextString ts = null;
		
		//黑色下滑线  字体
        Font font = workbook.createFont();  
	    font.setFontHeightInPoints((short) 12); // 字体高度  
	    font.setFontName("宋体"); // 字体 
	    font.setColor(HSSFColor.BLACK.index);  //颜色
	    font.setUnderline(Font.U_SINGLE);
	    //红色字体
	    Font font2 = workbook.createFont();  
	    font2.setFontHeightInPoints((short) 12); // 字体高度  
	    font2.setFontName("宋体"); // 字体  
	    font2.setColor(HSSFColor.RED.index);  //颜色
	    
	    int newlength = 0;
	    int oldlength = 0;
	    int otherlength = 0;
	    
	    if(newWellList != null) {
	    	newlength = newWellList.size();
	    }
	    if(oldWellList != null) {
	    	oldlength = oldWellList.size();
	    }
	    if(otherWellList != null) {
	    	otherlength = otherWellList.size();
	    }
	    
	    int newStrlength = newWellNameStrCon.length();
	    int oldStrlength = oldWellNameStrCon.length();
	    int otherStrlength = otherWellNameStrCon.length();
	    
	    if(otherlength == 0) {
	    	if(newStrlength != 0 && oldStrlength != 0) {
	    		newWellNameStrCon = newWellNameStrCon + "、";
	    		newStrlength++;
	    	}else {
	    		
	    	}
	    	
	    }else {
	    	
	    }
	    String sumStr = newWellNameStrCon + oldWellNameStrCon + otherWellNameStrCon ;
		ts= new HSSFRichTextString(sumStr); //单元
	    ts.applyFont(0,newStrlength,font);  			
	    ts.applyFont(newStrlength,(newStrlength+oldStrlength),font2); 
	    //System.out.println(newStrlength+"=="+(newStrlength+oldStrlength)+"=="+sumStr);
		return ts;
	}
	
	
	
	/**
	 * 分析  wellList  拼接数组
	 * @param dataList	要遍历 分析的数据	
	 * @param Length	字符的长度
	 * @param contStr	拼接的字符
	 * @param csRiZengOilCount 
	 */
	public String statisticsList(List<ReportCSJH> dataList) {
		String contStr = "";
		if(dataList != null) {
			for (int i=0;i<dataList.size();i++) {
				ReportCSJH reportCSJH = dataList.get(i);
				
				if(i==0 && reportCSJH != null) {
					contStr += reportCSJH.getWell_name();
					if( reportCSJH.getMark() != null) {
						contStr += "("+reportCSJH.getMark()+")";
					}
				}else {
					contStr += "、"+reportCSJH.getWell_name();
					if( reportCSJH.getMark() != null) {
						contStr += "("+reportCSJH.getMark()+")";
					}
				}
			}
			return contStr;
		}
		return null;
	}
	
	
	/**
	 * 日增油统计
	 * @param dataList
	 * @param csRiZengOilCount
	 * @return
	 */
	public Double dataListRiZengOilCount(List<ReportCSJH> dataList,Double csRiZengOilCount) {
		if(dataList == null) {
			return csRiZengOilCount;
		}else {
			for (int i=0;i<dataList.size();i++) {
				ReportCSJH reportCSJH = dataList.get(i);
				if(reportCSJH != null && reportCSJH.getProd_daily() != null ) {
					csRiZengOilCount += StringNumAddToDouble(csRiZengOilCount,reportCSJH.getProd_daily());
				}
			}
		}
		return csRiZengOilCount;
	}
	
	
	/**
	 * 
	 * @param dest  Double目标数组
	 * @param strNum string数字
	 * @return
	 */
	public Double StringNumAddToDouble(Double dest,String strNum) {
		final String reg = "\\d+\\.{0.1}\\d*";
		if(dest == null) {
			return Double.parseDouble(strNum);
		}else {
			if(strNum != null) {
				dest += Double.parseDouble(strNum);
			}
			return dest;
		}
	}
	
	
	
	/**
	 * 方法作用  就是统计后台的数据       
	 * 
	 * @param datalist	统计的目标数据
	 * @param site_statistics			工区信息存放
	 * @param csType_oil_statistics		油井的测试类型
	 * @param csType_water_statistics	水井的测试类型
	 * @param csType_other_statistics	其他井的测试类型
	 * @param wellType_statistics		井类型信息存放  油井  水井 其他	
	 * @param oilWellFlag				油井的标识  
	 * @param waterWellFlag				水井的标识
	 * @return
	 */
	public Map<String, Object> fenXiZuZhuangData(List<ReportCSJH> datalist, Map<String, Object> site_statistics,
			Map<String, Object> csType_oil_statistics, Map<String, Object> csType_water_statistics,
			Map<String, Object> csType_other_statistics, Map<String, Object> wellType_statistics, 
			String oilWellFlag,String waterWellFlag) {
			String oldWellType = "1";	//老井标识
			String newWellType = "0";  // 新井标识
		for (Iterator<ReportCSJH> iterator = datalist.iterator(); iterator.hasNext();) {	//遍历所有返回的数据结构
			ReportCSJH reportCSJH = (ReportCSJH) iterator.next();
			//获取所有的工区
			if(!site_statistics.containsKey(reportCSJH.getSite_id())  && (reportCSJH.getSite_id() != null) ) {
				site_statistics.put(reportCSJH.getSite_id(), reportCSJH);
			}
			
			//获取所有的油井测试类型：补孔
			if(!csType_oil_statistics.containsKey(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id())  
													&&  (reportCSJH.getCs_id() != null) 
													&& reportCSJH.getWell_type_flag().equals(oilWellFlag)	) {
				csType_oil_statistics.put(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id(), reportCSJH);
			}
			
			//获取所有的水井测试类型： 卡灰等
			if(!csType_water_statistics.containsKey(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id())  
													&&  (reportCSJH.getCs_id() != null) 
													&& reportCSJH.getWell_type_flag().equals(waterWellFlag)	) {
				csType_water_statistics.put(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id(), reportCSJH);
			}
			
			//获取所有的其他测试类型： 
			if(!csType_other_statistics.containsKey(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id())  
													&&  (reportCSJH.getCs_id() != null) 
													&& !reportCSJH.getWell_type_flag().equals(oilWellFlag)
													&& !reportCSJH.getWell_type_flag().equals(waterWellFlag)) {
				csType_other_statistics.put(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id(), reportCSJH);
			}
			//获取所有的井别 类型  ：油井，水井
			if(!wellType_statistics.containsKey(reportCSJH.getWell_type_flag())  &&  (reportCSJH.getWell_type_flag() != null) ) {
				wellType_statistics.put(reportCSJH.getWell_type_flag(), reportCSJH);
			}
		}    //所有的工区列表   所有的测试列表
		
		
		////////////////[ 拼接组织结构  ] ////////////////////////////////////////
		//site_id list ==>> well_type map ==>> site_Tytpe map ==>> CS_type map ==>> CSLIST map
		Map<String,Object> cdjhData_statistics = new HashMap<String,Object>(); 
		 
		for (Map.Entry<String, Object> wellentry:wellType_statistics.entrySet()) {
			Map<String,Object> well_type_map = new HashMap<String,Object>();
			
			for (Map.Entry<String, Object> siteentry:site_statistics.entrySet()) {
				Map<String,Object> site_type_map = new HashMap<String,Object>();
				//
				if(wellentry.getKey().equals(oilWellFlag)) {
					for (Map.Entry<String, Object> cs_entry:csType_oil_statistics.entrySet()) { //油井所有的测试类型
						Map<String,Object> csjh_tmp_map = new HashMap<String,Object>();
						List<Object> newWelllist = new ArrayList<>();
						List<Object> oilWelllist = new ArrayList<>();
						List<Object> otherWell = new ArrayList<>();
						csjh_tmp_map.put("newWell", newWelllist);
						csjh_tmp_map.put("oldWell", oilWelllist);
						csjh_tmp_map.put("otherWell", otherWell);
						site_type_map.put(cs_entry.getKey(), csjh_tmp_map);	//
					}
				}
				//
				if(wellentry.getKey().equals(waterWellFlag)) {
					for (Map.Entry<String, Object> cs_entry:csType_water_statistics.entrySet()) { // 水井的所有测试类型
						Map<String,Object> csjh_tmp_map = new HashMap<String,Object>();
						List<Object> newWelllist = new ArrayList<>();
						List<Object> oilWelllist = new ArrayList<>();
						List<Object> otherWell = new ArrayList<>();
						csjh_tmp_map.put("newWell", newWelllist);
						csjh_tmp_map.put("oldWell", oilWelllist);
						csjh_tmp_map.put("otherWell", otherWell);
						site_type_map.put(cs_entry.getKey(), csjh_tmp_map);	//
					}
				}
				//
				if(	!wellentry.getKey().equals(oilWellFlag) && !wellentry.getKey().equals(waterWellFlag)) {
					for (Map.Entry<String, Object> cs_entry:csType_other_statistics.entrySet()) { // 其他测试类型
						Map<String,Object> csjh_tmp_map = new HashMap<String,Object>();
						List<Object> newWelllist = new ArrayList<>();
						List<Object> oilWelllist = new ArrayList<>();
						List<Object> otherWell = new ArrayList<>();
						csjh_tmp_map.put("newWell", newWelllist);
						csjh_tmp_map.put("oldWell", oilWelllist);
						csjh_tmp_map.put("otherWell", otherWell);
						site_type_map.put(cs_entry.getKey(), csjh_tmp_map);	//
					}
				}
				well_type_map.put(siteentry.getKey(), site_type_map);		//  well_type 二级  添加 site_map
			}
			
			cdjhData_statistics.put(wellentry.getKey(), well_type_map);	//cdjhData_statistics 一级  添加 well_type
		}
		
		////////////[  将对应的函数添加到    对应的map 中  
		for (ReportCSJH reportCSJH : datalist) {
			if(reportCSJH.getWell_type_flag() != null 
				&& reportCSJH.getSite_id()!= null 
				&& reportCSJH.getCs_id() !=null 
				&& reportCSJH != null) {
				
				Map<String,Object> wellTypeMap = 
						(Map<String, Object>) cdjhData_statistics.get(reportCSJH.getWell_type_flag());
				Map<String,Object> siteTypeMap = 
						(Map<String, Object>) wellTypeMap.get(reportCSJH.getSite_id());
				Map<String,Object> csjhTypeMap = 
						(Map<String, Object>) siteTypeMap.get(reportCSJH.getWell_type_flag()+"-"+reportCSJH.getCs_id());
				if(reportCSJH.getWell_flag().equals(newWellType) ) {  //心井
					List<Object> newWelllist = (List<Object>) csjhTypeMap.get("newWell");
					newWelllist.add(reportCSJH);
				}else if(reportCSJH.getWell_flag().equals(oldWellType) ) {  //心井
					List<Object> oilWelllist = (List<Object>) csjhTypeMap.get("oldWell");
					oilWelllist.add(reportCSJH);
				}else {
					List<Object> otherWelllist = (List<Object>) csjhTypeMap.get("otherWell");
					otherWelllist.add(reportCSJH);
				}
			}
		}
		//System.out.println(JSON.toJSONString(cdjhData_statistics));
		return cdjhData_statistics;
	}

	
	
	/**
	 * 为excel最后添加一个合计的方法
	 * @param csType_oil_statistics
	 * @param csType_water_statistics
	 * @param csType_other_statistics
	 * @param sheet
	 * @param rowNum
	 */
	public void funAddSumEnd(Map<String, Object> csType_oil_statistics, 
							 Map<String, Object> csType_water_statistics,
							 Map<String, Object> csType_other_statistics, 
							 HSSFCellStyle style1,
							 HSSFCellStyle style2,
							 HSSFCellStyle style3,
							 HSSFSheet sheet, int rowNum) {
		HSSFRow row1;
		//判断最后添加 【合计】的位置
		int size_oil_water_other = csType_oil_statistics.size() +csType_water_statistics.size() +csType_other_statistics.size();
		int size_oil = csType_oil_statistics.size() ;
		int size_water = csType_water_statistics.size() ;
		int size_other = csType_other_statistics.size();
		HSSFCell heJicell = null;  //合计单元格
		String hejiCellName = "合计";
		int hejiCellHeight = 300;
		int startRowNumber = 4;		// 4从4列开始算  数据区域
		if(size_other ==0  ) {//只有油水井  最多加两个小计   一个合计
			if(size_oil != 0 && size_water != 0 ) {
				if(rowNum ==( size_oil_water_other + startRowNumber + 2) ) {//
					row1 = sheet.createRow(rowNum);
					row1.setHeight((short)hejiCellHeight);
					heJicell = row1.createCell(0);
					heJicell.setCellValue(new HSSFRichTextString(hejiCellName));
					heJicell.setCellStyle(style2);
					heJicell = row1.createCell(1);
					heJicell.setCellStyle(style2);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 1));
				}
			}else if((size_oil== 0 && size_water != 0 )
					|| (size_oil!= 0 && size_water == 0 )){
				if(rowNum ==( size_oil_water_other + startRowNumber +1)) {//
					row1 = sheet.createRow(rowNum);
					row1.setHeight((short)hejiCellHeight);
					heJicell = row1.createCell(0);
					heJicell.setCellValue(new HSSFRichTextString(hejiCellName));
					heJicell.setCellStyle(style2);
					heJicell = row1.createCell(1);
					heJicell.setCellStyle(style2);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 1));
				}
			}else {
				if(rowNum ==( size_oil_water_other + startRowNumber )) {
					row1 = sheet.createRow(rowNum);
					row1.setHeight((short)hejiCellHeight);
					heJicell = row1.createCell(0);
					heJicell.setCellValue(new HSSFRichTextString(hejiCellName));
					heJicell.setCellStyle(style2);
					heJicell = row1.createCell(1);
					heJicell.setCellStyle(style2);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 1));
				}
			}
		}else {	//最多会加 3个小计  加一个合计  
			//System.out.println("other"+size_oil_water_other+">>>"+rowNum);
			if(size_oil != 0 && size_water != 0 ) {
				if(rowNum ==( size_oil_water_other + startRowNumber +3 ) ) {//
					row1 = sheet.createRow(rowNum );
					row1.setHeight((short)hejiCellHeight);
					heJicell = row1.createCell(0);
					heJicell.setCellValue(new HSSFRichTextString(hejiCellName));
					heJicell.setCellStyle(style2);
					heJicell = row1.createCell(1);
					heJicell.setCellStyle(style2);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 1));
				}
			}else if((size_oil== 0 && size_water != 0 )
					|| (size_oil!= 0 && size_water == 0 )){
				if(rowNum ==( size_oil_water_other + startRowNumber +2)) {//
					row1 = sheet.createRow(rowNum);
					row1.setHeight((short)hejiCellHeight);
					heJicell = row1.createCell(0);
					heJicell.setCellValue(new HSSFRichTextString(hejiCellName));
					heJicell.setCellStyle(style2);
					heJicell = row1.createCell(1);
					heJicell.setCellStyle(style2);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 1));
				}
			}else {
				if(rowNum ==( size_oil_water_other + startRowNumber + 1)) {//
					row1 = sheet.createRow(rowNum);
					row1.setHeight((short)hejiCellHeight);
					heJicell = row1.createCell(0);
					heJicell.setCellValue(new HSSFRichTextString(hejiCellName));
					heJicell.setCellStyle(style2);
					heJicell = row1.createCell(1);
					heJicell.setCellStyle(style2);
					sheet.addMergedRegion(new CellRangeAddress(rowNum, rowNum, 0, 1));
				}
			}
		}
	}
	

	
	
	
	
	
	
	/**  新增或者更新   csjhoption 下拉框
	 * /csjh/insertOrUpdateCsjhOption
	 */
	@RequestMapping("/insertOrUpdateCsjhOption")
	@ResponseBody
	public String insertOrUpdateCsjhOption(CsjhOption csjhOption){	
		return this.csjhService.insertOrUpdateCsjhOption(csjhOption);
	}
	

	
	/**  
	 *  删除 csjhOption  下拉框
	 * /csjh/deleteCsjhOption
	 * 	删除传递jcjh——id
	 */
	@RequestMapping("/deleteCsjhOption")
	@ResponseBody
	public String deleteCsjh(CsjhOption csjhOption){	
		return this.csjhService.deleteCsjhOption(csjhOption.getCs_id());
	}
	

	/**   
	 * 	获取所有的
	 * 	/csjh/getCsjhOption
	 * 	不需要传递参数  获取全部水的检测类型
	 */
	@RequestMapping("/getCsjhOption")
	@ResponseBody
	public String getCsjhOption(CsjhOption csjhOption){	
		List<CsjhOption> list =this.csjhService.getJCsjhOption(csjhOption);
		return JSON.toJSONString(list);
	}
	
	
	
	
	
	
	
}
