package com.hrxt.controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.hrxt.pojo.MonthPZ;
import com.hrxt.pojo.OilJCJH;
import com.hrxt.pojo.Page;
import com.hrxt.pojo.Xjscyxk;
import com.hrxt.service.MonthPZService;
import com.hrxt.service.WellService;
import com.hrxt.utils.ExcelUtil;
import com.hrxt.utils.JSONutils;


@Controller
@RequestMapping("/monthPZ")
public class MonthPZController {

	@Autowired
	private MonthPZService monthPZService;
	
	@Autowired
	private WellService wellService;
	
	
	@RequestMapping("/insert")
	@ResponseBody
	public String insetMonthPZ(MonthPZ monthPZ){	
		return this.monthPZService.insertOrUpdate(monthPZ);
	}
	
	
	@RequestMapping("/insertList")
	@ResponseBody
	public String insetMonthPZList( MonthPZ monthPZ){	
		System.out.println(JSONutils.Object2String(monthPZ));
		List<MonthPZ> list11 = new ArrayList<MonthPZ>();
		list11.add(monthPZ);
		List<String> list = monthPZService.batchInsertOrUpdate(list11);
		return JSON.toJSONString(list);
	}
	
	
	@RequestMapping("/delOneMonthPZ")
	@ResponseBody
	public String delOneMonthPZ(String seq){	
		  return monthPZService.delOneYPZBB(seq);
	}

	
	@RequestMapping("/delMonthPZList")
	@ResponseBody
	public String delMonthPZList(String seqlist){	
		return monthPZService.delListYPZBB(seqlist);
	}
	
	/**
	 * monthPZ记录审核  方法
	 * @param seqlist
	 * @return
	 */
	@RequestMapping("/auditMonthP")
	@ResponseBody
	public String auditMonthPZ(String seqlist){	
		return monthPZService.auditOneYPZBB(seqlist);
	}
	
	@RequestMapping("/unAuditMonthP")
	@ResponseBody
	public String unAuditMonthPZ(String seqlist){	
		return monthPZService.unAuditOneYPZBB(seqlist);
	}
	/**
	 * monthPZ【提交】  方法
	 * @param seqlist
	 * @return
	 */
	@RequestMapping("/submittMonthP")
	@ResponseBody
	public String submitMonthPZ(String seqlist){	
		return monthPZService.submitMonthPZ(seqlist);
	}
	@RequestMapping("/unSubmittMonthP")
	@ResponseBody
	public String unSubmitMonthPZ(String seqlist){	
		return monthPZService.unSubmitMonthPZ(seqlist);
	}
	
	
	/**
	 * 获取配注信息  通过分页
	 * @param monthPZ
	 * @param page
	 * @return
	 */
	@RequestMapping("/getMonthPZList")
	@ResponseBody
	public String getMonthPZList(MonthPZ monthPZ,Page<List<MonthPZ>> page){	
		return JSON.toJSONString(monthPZService.getMonthPZList(monthPZ, page));
	}
	
	
	//    /monthPZ/getMonthPZListjson
	@RequestMapping("/getMonthPZListjson")
	@ResponseBody
	public String getMonthPZListfastJSON(MonthPZ monthPZ,Page<List<MonthPZ>> page){	
		;
		return JSON.toJSONString(monthPZService.getMonthPZList(monthPZ, page));
	}
	
	
	
	/**  /monthPZ/dwnloadTmp
	 * 下载导入模板        下面的过滤条件  必须填
	 * 	"site_id", 
		"yc_id",
		"stime", 
		"well_id", 
	 */
	@RequestMapping("/dwnloadTmp")
	public void dwnloadTmpMB(MonthPZ monthPZ,HttpServletResponse response,String fileName){
		
		//获取配注的计划信息
		List<MonthPZ> monthPZlist = this.monthPZService.getMonthPZMB(monthPZ);
		
		HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("信息表");

        if(fileName ==  null) {
        	fileName = "月配注模板导出";//设置要导出的文件的名字
        }
        
        //新增数据行，并且设置单元格数据
        int rowNum = 1;

        String[] headers = { "工区", "断块", "井名", "地质配注","考核配注","时间","备注"};
        
        //设置列宽
        sheet.setColumnWidth(0, 35*150);
        sheet.setColumnWidth(1, 35*150);
        sheet.setColumnWidth(2, 35*150);
        sheet.setColumnWidth(3, 35*150);
        sheet.setColumnWidth(4, 35*150);
        sheet.setColumnWidth(5, 35*150);
        //headers表示excel表中第一行的表头

        HSSFRow row = sheet.createRow(0);
        
        //在excel表中添加表头
        for(int i=0;i<headers.length;i++){
            HSSFCell cell = row.createCell(i);
            HSSFRichTextString text = new HSSFRichTextString(headers[i]);
            cell.setCellValue(text);
            
        }

        //在表中存放查询到的数据放入对应的列
        for (MonthPZ welltmp : monthPZlist) {
            HSSFRow row1 = sheet.createRow(rowNum);
            row1.createCell(0).setCellValue(welltmp.getSite_name());
            row1.createCell(1).setCellValue(welltmp.getYc_name());
            row1.createCell(2).setCellValue(welltmp.getWell_name());
            if(welltmp.getDzpz() != null) {
            	row1.createCell(3).setCellValue(welltmp.getDzpz());
            }
            if(welltmp.getKhpz() != null) {
            	row1.createCell(4).setCellValue(welltmp.getKhpz());
            }
            if(welltmp.getStime() != null) {
            	row1.createCell(5).setCellValue(welltmp.getStime());
            }
            if(welltmp.getMark() != null) {
            	row1.createCell(6).setCellValue(welltmp.getMark());
            }
            rowNum++;
        }

        response.setContentType("application/octet-stream");
        String newFileName = "";
		try {
			newFileName = new String(fileName.getBytes("gb2312"), "ISO8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        response.setHeader("Content-disposition", "attachment;filename=" + newFileName+ ".xls");
        try {
			response.flushBuffer();
			workbook.write(response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
        
	}
	
	
	@RequestMapping("/dwnloadQueryData")
	public void dwnloadQueryData(MonthPZ monthPZ,Page<List<MonthPZ>> page,HttpServletResponse response,String fileName){
		
		//获取配注的计划信息
		Map<String,Object> map = this.monthPZService.getMonthPZList(monthPZ, page);
		List<MonthPZ> datalist = (List<MonthPZ>)map.get("data"); 
		
		HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("信息表");

        if(fileName ==  null) {
        	fileName = "月配注模板导出" ;//设置要导出的文件的名字
        }
        
        //新增数据行，并且设置单元格数据
        int rowNum = 1;

        String[] headers = { "工区", "断块", "井名", "地质配注","考核配注","时间","备注"};
        
        //设置列宽
        sheet.setColumnWidth(0, 35*150);
        sheet.setColumnWidth(1, 35*150);
        sheet.setColumnWidth(2, 35*150);
        sheet.setColumnWidth(3, 35*150);
        sheet.setColumnWidth(4, 35*150);
        sheet.setColumnWidth(5, 35*150);
        //headers表示excel表中第一行的表头

        HSSFRow row = sheet.createRow(0);
        
        //在excel表中添加表头
        for(int i=0;i<headers.length;i++){
            HSSFCell cell = row.createCell(i);
            HSSFRichTextString text = new HSSFRichTextString(headers[i]);
            cell.setCellValue(text);
            
        }

        //在表中存放查询到的数据放入对应的列
        for (MonthPZ welltmp : datalist) {
            HSSFRow row1 = sheet.createRow(rowNum);
            row1.createCell(0).setCellValue(welltmp.getSite_name());
            row1.createCell(1).setCellValue(welltmp.getYc_name());
            row1.createCell(2).setCellValue(welltmp.getWell_name());
            if(welltmp.getDzpz() != null) {
            	row1.createCell(3).setCellValue(welltmp.getDzpz());
            }
            if(welltmp.getKhpz() != null) {
            	row1.createCell(4).setCellValue(welltmp.getKhpz());
            }
            if(welltmp.getStime() != null) {
            	row1.createCell(5).setCellValue(welltmp.getStime());
            }
            if(welltmp.getMark() != null) {
            	row1.createCell(6).setCellValue(welltmp.getMark());
            }
            rowNum++;
        }

        response.setContentType("application/octet-stream");
        String newFileName = "";
		try {
			newFileName = new String(fileName.getBytes("gb2312"), "ISO8859-1");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        response.setHeader("Content-disposition", "attachment;filename=" + newFileName+ ".xls");
        try {
			response.flushBuffer();
			workbook.write(response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
        
	}
	
	
	//excel批量上传数据     /monthPZ/excelUpdateMonthPZ
	/**
	 * @param monthPZ
	 * @param fileMult
	 * @param fileName
	 * @return
	 */
	@RequestMapping("/excelUpdateMonthPZ")
	public String updateMonthPZList(MultipartFile fileMult,String fileName){	
		List<Map<String, Object>> list = null;
		if(fileMult==null) {
			//System.out.println("没有数据流");
			return "没有数据流";
		}
		try {
			String name =  fileMult.getOriginalFilename();
			InputStream is = fileMult.getInputStream();
			//System.out.println(name+is);
			String [] fileds = {"site_name","yc_name","well_name","dzpz","khpz","stime","mark"};
			if(is != null) {
				list = ExcelUtil.getDataListByexcel(0, 1, is, name, fileds);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> map = list.get(i);
			MonthPZ monthPz = new MonthPZ();
			monthPz.setSite_name((String)map.get("site_name"));
			monthPz.setYc_name((String)map.get("yc_name"));
			monthPz.setDzpz((Integer.parseInt((String) map.get("dzpz"))));
			monthPz.setWell_name((String)map.get("well_name"));
			monthPz.setStime((String)map.get("stime"));
			monthPz.setMark((String)map.get("mark"));
			System.out.println(JSONutils.Object2String(map));
			monthPZService.insertOrUpdateByExcel(monthPz);
		}
		
		return "";
	}
	
	
	/**
	 * 月配注报表
	 * @throws IOException 
	 * 
	 */
	@RequestMapping("downloadMothPZBB")
	@ResponseBody
	public String downloadMothPZBB(HttpServletResponse response,String fileName) throws IOException{
	String sheetName1 = "文字";

		
		
		HSSFWorkbook wb = null;
		// 第一步，创建一个HSSFWorkbook，对应一个Excel文件
		if (wb == null) {
			wb = new HSSFWorkbook();

		}

		// 第二步，在workbook中添加一个sheet,对应Excel文件中的sheet
		HSSFSheet sheet = wb.createSheet("文字");
		sheet.setColumnWidth((short) 0, 2500);
		sheet.setColumnWidth((short) 1, 2500);
		sheet.setColumnWidth((short) 2, 5000);
		sheet.setColumnWidth((short) 3, 5000);
		sheet.setColumnWidth((short) 4, 2500);
		sheet.setColumnWidth((short) 5, 2500);
		sheet.setColumnWidth((short) 6, 15000);
		sheet.setColumnWidth((short) 7, 8000);
		sheet.setColumnWidth((short) 8, 7000);
		sheet.setColumnWidth((short) 9, 5000);
		sheet.setColumnWidth((short) 10, 5000);
		sheet.setColumnWidth((short) 11, 3000);
		sheet.setColumnWidth((short) 12, 3000);
		sheet.setColumnWidth((short) 13, 3000);
		sheet.setColumnWidth((short) 14, 3000);
		sheet.setColumnWidth((short) 15, 8000);

		//表头样式 1 开始
		HSSFFont titleFont = wb.createFont();
		titleFont.setFontName("Times New Roman");
		titleFont.setFontHeightInPoints((short) 26);// 字号
		titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);// 加粗
		
		// 第四步，创建单元格，并设置值表头 设置表头居中  
		HSSFCellStyle style = wb.createCellStyle(); // 表格内容样式
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style.setBorderBottom(HSSFCellStyle.BORDER_NONE);// 下边框
		style.setBorderLeft(HSSFCellStyle.BORDER_NONE);// 左边框
		style.setBorderRight(HSSFCellStyle.BORDER_NONE);// 右边框
		style.setBorderTop(HSSFCellStyle.BORDER_NONE);// 上边框
	style.setWrapText(true); // 设置换行
		style.setFont(titleFont);
	
		//内容样式3开始
		HSSFFont font= wb.createFont();
		font.setFontName("仿宋_GB2312");
		font.setFontHeightInPoints((short) 16);// 字号
		//font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);// 加粗
		
		HSSFCellStyle style3 = wb.createCellStyle(); // 表格内容样式
		style3.setAlignment(HSSFCellStyle.ALIGN_LEFT); // 创建一个居左格式
		style3.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style3.setBorderBottom(HSSFCellStyle.BORDER_NONE);// 下边框
		style3.setBorderLeft(HSSFCellStyle.BORDER_NONE);// 左边框
		style3.setBorderRight(HSSFCellStyle.BORDER_NONE);// 右边框
		style3.setBorderTop(HSSFCellStyle.BORDER_NONE);// 上边框
		style3.setWrapText(true); // 设置换行
		style3.setFont(font);
		
		
		
		// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制
		HSSFRow row = sheet.createRow(0);
		row.setHeight((short) 800);
		HSSFCell createCell = row.createCell(0);
		createCell.setCellValue("2018年9月");
		createCell.setCellStyle(style);
		 row.createCell(1).setCellStyle(style);
		 row.createCell(2).setCellStyle(style);
		 row.createCell(3).setCellStyle(style);
		 row.createCell(4).setCellStyle(style);
		 row.createCell(5).setCellStyle(style);
		 row.createCell(6).setCellStyle(style);
		
		HSSFRow row1 = sheet.createRow(1);
		row1.setHeight((short) 1200);
		HSSFCell row1CreateCell = row1 .createCell(0);
		row1CreateCell.setCellValue("第三采油厂油田配注公报");
		row1CreateCell.setCellStyle(style);
		
		 row1.createCell(1).setCellStyle(style);
		 row1.createCell(2).setCellStyle(style);
		 row1.createCell(3).setCellStyle(style);
		 row1.createCell(4).setCellStyle(style);
		 row1.createCell(5).setCellStyle(style);
		 row1.createCell(6).setCellStyle(style);
		 
		sheet.addMergedRegion(new CellRangeAddress(0,0, 0, 6));
		
		sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 6));
		sheet.addMergedRegion(new CellRangeAddress(2, 2, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(3, 3, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(6, 6, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(7, 7, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(8, 8, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(9, 9, 1, 6));
		sheet.addMergedRegion(new CellRangeAddress(10, 10, 1, 6));
		
	
		HSSFRow row2 = sheet.createRow(2);
		HSSFRow row3 = sheet.createRow(3);
		HSSFRow row4 = sheet.createRow(4);
		HSSFRow row5 = sheet.createRow(5);
		HSSFRow row6 = sheet.createRow(6);
		HSSFRow row7 = sheet.createRow(7);
		HSSFRow row8 = sheet.createRow(8);
		HSSFRow row9 = sheet.createRow(9);
		HSSFRow row10 = sheet.createRow(10);
		HSSFRow row11 = sheet.createRow(11);
		HSSFRow row12 = sheet.createRow(12);
		HSSFRow row13 = sheet.createRow(13);
		HSSFRow row14 = sheet.createRow(14);
		HSSFRow row15 = sheet.createRow(15);
		HSSFRow row16 = sheet.createRow(16);
		HSSFRow row17 = sheet.createRow(17);
		HSSFRow row18 = sheet.createRow(18);
		HSSFRow row19 = sheet.createRow(19);
		HSSFRow row20= sheet.createRow(20);
		
		
		
		
		
		row2.setHeight((short) 900);
		row3.setHeight((short) 900);
		row4.setHeight((short) 900);
		row5.setHeight((short) 900);
		row6.setHeight((short) 900);
		row7.setHeight((short) 900);
		row8.setHeight((short) 900);
		row9.setHeight((short) 900);
		row10.setHeight((short)900);
		row11.setHeight((short)900);
		row12.setHeight((short)900);
		row13.setHeight((short)900);
		row14.setHeight((short)900);
		row15.setHeight((short)900);
		row16.setHeight((short)900);
		row17.setHeight((short)900);
		row18.setHeight((short)900);
		row19.setHeight((short)900);
		row20.setHeight((short)900);
		
		HSSFCell row2CreateCell = row2 .createCell(0);
		HSSFCell row3CreateCell = row3 .createCell(0);
		HSSFCell row4CreateCell = row4 .createCell(0);
		HSSFCell row5CreateCell = row5 .createCell(0);
		HSSFCell row6CreateCell = row6 .createCell(0);
		HSSFCell row7CreateCell = row7 .createCell(0);
		HSSFCell row8CreateCell = row8 .createCell(0);
		HSSFCell row9CreateCell = row9 .createCell(0);
		HSSFCell row10CreateCell = row10.createCell(0);
		
		HSSFCell row2CreateCell1 = row2 .createCell(1);
		HSSFCell row3CreateCell1 = row3 .createCell(1);
		HSSFCell row4CreateCell1 = row4 .createCell(1);
		HSSFCell row5CreateCell1 = row5 .createCell(1);
		HSSFCell row6CreateCell1 = row6 .createCell(1);
		HSSFCell row7CreateCell1 = row7 .createCell(1);
		HSSFCell row8CreateCell1 = row8 .createCell(1);
		HSSFCell row9CreateCell1 = row9 .createCell(1);
		HSSFCell row10CreateCell1 = row10.createCell(1);
		
		HSSFCell row15CreateCell1 = row15.createCell(1);
		HSSFCell row15CreateCell5 = row15.createCell(5);
		HSSFCell row17CreateCell6 = row17.createCell(6);
		HSSFCell row18CreateCell6 = row18.createCell(6);
		
		
		
		 row2CreateCell.setCellValue("1、");
		 row3CreateCell.setCellValue("2、");
		 row4CreateCell.setCellValue("3、");
		 row5CreateCell.setCellValue("4、");
		 row6CreateCell.setCellValue("5、");
		 row7CreateCell.setCellValue("6、");
	     row8CreateCell.setCellValue("7、");
	     row9CreateCell.setCellValue("8、");
	     
	     row2CreateCell1 .setCellValue(" 根据井组合理注采比及实际注水能力，结合公司下达的注水任务，编制计划配注。");
		row3CreateCell1 .setCellValue(" 在保持油藏合理注采比的原则下,采取科学注水的方针,既要防止含水上升过快,又要保持一定的地层能量。");
		row4CreateCell1 .setCellValue(" 各工区必须严格执行砂岩油藏配注计划，不能超过地质配注，不能低于考核配注。");
		row5CreateCell1 .setCellValue(" 注不进水的井要及时向地质研究所反映，地质研究所根据实际情况调整配注。");
		row6CreateCell1 .setCellValue(" 因钻井、作业等原因停注影响的水量不得补水量,如需补注必须经地质所同意。  钻井完钻、作业施工结束后执行地质配注。");
		row7CreateCell1 .setCellValue(" 处理污水方面,考核注水量的井要严格执行配注。");
		row8CreateCell1 .setCellValue(" 各采油工区地质技术负责人要经常检查所管油田(或区块)的配注执行情况及注采比是否合理。");
		row9CreateCell1 .setCellValue(" 分注井测调通知单地质所审核后上传到协同工作，由工程所安排测调。");
		
		row2CreateCell.setCellStyle(style3);
		row3CreateCell.setCellStyle(style3);
		row4CreateCell.setCellStyle(style3);
		row5CreateCell.setCellStyle(style3);
		row6CreateCell.setCellStyle(style3);
		row7CreateCell.setCellStyle(style3);
		row8CreateCell.setCellStyle(style3);
		row9CreateCell.setCellStyle(style3);
		
		row2CreateCell1.setCellStyle(style3);
		row3CreateCell1.setCellStyle(style3);
		row4CreateCell1.setCellStyle(style3);
		row5CreateCell1.setCellStyle(style3);
		row6CreateCell1.setCellStyle(style3);
		row7CreateCell1.setCellStyle(style3);
		row8CreateCell1.setCellStyle(style3);
		row9CreateCell1.setCellStyle(style3);

		
		//底部内容
				row15CreateCell1.setCellValue("审核: ");
				row15CreateCell5.setCellValue("审核: ");
				row17CreateCell6.setCellValue(" 第三采油厂地质研究所 ");
				row18CreateCell6.setCellValue("2018年8月25日");
				
				row15CreateCell1.setCellStyle(style3);
				row15CreateCell5.setCellStyle(style3);
				row17CreateCell6.setCellStyle(style3);
				row18CreateCell6.setCellStyle(style3);
		
				String sheetName="工区";
				String titleName="河间工区配注公报";
				
				createSheet(wb,sheetName,titleName);
				
				
				
		
	/*	sheet.addMergedRegion(new CellRangeAddress(1, 1, 9, 10));
		sheet.addMergedRegion(new CellRangeAddress(1, 2, 11, 11));
		sheet.addMergedRegion(new CellRangeAddress(1, 2, 12, 12));
		sheet.addMergedRegion(new CellRangeAddress(1, 1, 13, 15));*/
		

	/*	HSSFRow row1 = sheet.createRow(1);
		HSSFRow row2 = sheet.createRow(2);*/
		// 声明列对象
		//HSSFCell cell = null;
		// 创建标题
	/*	for (int i = 0; i < title1.length; i++) {
			cell = row1.createCell(i);
			cell.setCellValue(title1[i]);
			cell.setCellStyle(style2);
		}*/
		
		//获取措施计划数据
		//List<OilJCJH> datalist = this.oilJCJHService.getOilJCJHReport(site_id, date);
/*		int sumWell=0;
		
		String xm = "";
		String testType="";
		int stratRowNum = 3;
		int stratRowNumType = 3;
		// 创建内容
		for (int i = 0; i < datalist.size(); i++) {
		
			
			row = sheet.createRow(i + 3);
			HSSFCell createCell0 = row.createCell(0);
			HSSFCell createCell1 = row.createCell(1);
			HSSFCell createCell2 = row.createCell(2);
			HSSFCell createCell3 = row.createCell(3);
			HSSFCell createCell4 = row.createCell(4);
			HSSFCell createCell5 = row.createCell(5);
			HSSFCell createCell6 = row.createCell(6);
			HSSFCell createCell7 = row.createCell(7);
			HSSFCell createCell8 = row.createCell(8);
			HSSFCell createCell9 = row.createCell(9);
			HSSFCell createCell10 = row.createCell(10);
			HSSFCell createCell11= row.createCell(11);
			HSSFCell createCell12= row.createCell(12);
			HSSFCell createCell13 = row.createCell(13);
			HSSFCell createCell14= row.createCell(14);
			HSSFCell createCell15= row.createCell(15);
			createCell0.setCellValue(datalist.get(i).getXm());
			createCell1.setCellValue(datalist.get(i).getCs_type_name());
			createCell2.setCellValue(datalist.get(i).getWell_name());
			createCell3.setCellValue(datalist.get(i).getWell_section());
			createCell4.setCellValue(datalist.get(i).getThickness() == null?"":datalist.get(i).getThickness()+"");
			createCell5.setCellValue(datalist.get(i).getPlies_num() == null?"":datalist.get(i).getPlies_num()+"");
			createCell6.setCellValue(datalist.get(i).getCs_purpose());
			createCell7.setCellValue(datalist.get(i).getCs_claim());
			createCell8.setCellValue(datalist.get(i).getLast_success_date());
			createCell9.setCellValue(datalist.get(i).getRecently_fail_date());
			createCell10.setCellValue(datalist.get(i).getRecently_revise_mesg());
			createCell11.setCellValue(datalist.get(i).getLevel_demand()==null?"":datalist.get(i).getLevel_demand()+"");
			createCell12.setCellValue(datalist.get(i).getTc_date());
			createCell13.setCellValue(datalist.get(i).getFk_cd_date());
			createCell14.setCellValue(datalist.get(i).getWcd_mesg());
			createCell15.setCellValue(datalist.get(i).getSjyy());
			createCell0.setCellStyle(style3);
			createCell1.setCellStyle(style3);
			createCell2.setCellStyle(style3);
			createCell3.setCellStyle(style3);
			createCell4.setCellStyle(style3);
			createCell5.setCellStyle(style3);
			createCell6.setCellStyle(style3);
			createCell7.setCellStyle(style3);
			createCell8.setCellStyle(style3);
			createCell9.setCellStyle(style3);
			createCell10.setCellStyle(style3);
			createCell11.setCellStyle(style3);
			createCell12.setCellStyle(style3);
			createCell13.setCellStyle(style3);
			createCell14.setCellStyle(style3);
			createCell15.setCellStyle(style3);
		}*/

		OutputStream output = response.getOutputStream();
		response.reset();
		response.setHeader("Content-disposition","attachment; filename=monthPZbb.xls");
		response.setContentType("application/msexcel");
		wb.write(output);
		output.flush();
		output.close();
		
		return null;
	}

/**
 * 创建sheet方法
 * @param wb
 */
	public void createSheet(HSSFWorkbook wb,String sheetName,String titleName) {
	
		
		//表头样式2 开始
		HSSFFont titleFont2 = wb.createFont();
		titleFont2.setFontName("宋体");
		titleFont2.setFontHeightInPoints((short) 11);// 字号
		titleFont2.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);// 加粗
		
		HSSFCellStyle style2 = wb.createCellStyle(); // 表格内容样式
		style2.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		style2.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);// 垂直
		style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);// 下边框
		style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);// 左边框
		style2.setBorderRight(HSSFCellStyle.BORDER_THIN);// 右边框
		style2.setBorderTop(HSSFCellStyle.BORDER_THIN);// 上边框
		style2.setWrapText(true); // 设置换行
		style2.setFont(titleFont2);
		
		HSSFSheet sheet2 = wb.createSheet(sheetName);
		
		// String[] title1 = {"2018年9月第三采油厂油田配注公报"};
		
		String[] sheet2Title2 = { "油藏","井号","地质配注","考核配注","上月考核配注","备注"};
			
		
		
		sheet2.setColumnWidth((short) 0, 2500);
		sheet2.setColumnWidth((short) 1, 2500);
		sheet2.setColumnWidth((short) 2, 2500);
		sheet2.setColumnWidth((short) 3, 2500);
		sheet2.setColumnWidth((short) 4, 2500);
		sheet2.setColumnWidth((short) 5, 5500);
		
		HSSFRow sheet2Row0 = sheet2.createRow(0);
		HSSFRow sheet2Row1 = sheet2.createRow(1);
		sheet2Row0.setHeight((short)900);
		HSSFCell sheet2Row0createCell0 = sheet2Row0.createCell(0);
		sheet2Row0createCell0.setCellStyle(style2);
		sheet2Row0createCell0.setCellValue(titleName);
		sheet2.addMergedRegion(new CellRangeAddress(0,0, 0, 5));
		
HSSFCell cell = null;
		// 创建标题
for (int i = 0; i < sheet2Title2.length; i++) {
			cell = sheet2Row1.createCell(i);
			cell.setCellValue(sheet2Title2[i]);
			cell.setCellStyle(style2);
		}
	}
	
	
   
   
   
	
	
}
